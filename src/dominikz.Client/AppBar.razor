@using dominikz.Infrastructure.Clients.Api
@using System.Web
@using dominikz.Client.Pages
<div class="appbar">
    <div class="appbar-title">
        <span @onclick="CallOnExpandClicked" class="appbar-menu fa-solid fa-bars"></span>
        <span>dominikzettl.dev</span>
    </div>

    <div class="appbar-buttons">
        <IconButton OnClick="@(() => NavigationManager!.NavigateTo("/imprint"))" Icon="fa-solid fa-scale-balanced"/>
        @if (_isLoggedIn == false)
        {
            <IconButton OnClick="@(OnLoginClicked)" Icon="fa-solid fa-lock"/>
        }
        else
        {
            <IconButton OnClick="@(OnLogoutClicked)" Icon="fa-solid fa-lock-open"/>
        }
    </div>
</div>

@code
{
    [Parameter] public EventCallback OnExpandClicked { get; set; }
    [Inject] protected NavigationManager? NavigationManager { get; set; }
    [Inject] protected ICredentialStorage? Credentials { get; set; }

    private bool _isLoggedIn;

    protected override async Task OnInitializedAsync()
        => _isLoggedIn = await Credentials!.IsLoggedIn();

    private async Task CallOnExpandClicked()
        => await OnExpandClicked.InvokeAsync();

    private void OnLoginClicked()
    {
        var redirect = NavigationManager!.ToAbsoluteUri(NavigationManager.Uri).PathAndQuery;
        if (redirect.StartsWith('/'))
            redirect = redirect.Remove(0, 1);

        NavigationManager!.NavigateTo($"/login?{Login.QueryRedirect}={HttpUtility.UrlEncode(redirect)}");
    }

    private async Task OnLogoutClicked()
    {
        await Credentials!.Clear();
        _isLoggedIn = false;
    }
}
