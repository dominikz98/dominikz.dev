@page "/cookbook/recipes/edit"
@page "/cookbook/recipes/edit/{recipeid:guid}"
@using dominikz.Domain.Enums.Cookbook

@if (_isEnabled == false)
{
    <PageTitle>Loading</PageTitle>
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <PageTitle>@(RecipeId != null ? _data.ViewModel.Name : "Recipe")</PageTitle>

    <EditForm EditContext="@_editContext" OnSubmit="@OnSaveClicked">
        <DataAnnotationsValidator/>

        <div class="container">

            @* General *@
            <div class="grid-col-2 shrink gap">
                <div class="grid-label grid-label-span-4">
                    <span>‚öôÔ∏è</span>
                </div>

                <div class="flex-column gap">
                    <TextBox Placeholder="Title" @bind-Value="_data.ViewModel.Name"/>
                    <ValidationMessage For="@(() => _data.ViewModel.Name)"/>
                </div>

                <div class="flex-column gap">
                    <NumberPicker @bind-Value="_data.ViewModel.Portions" Min="0" Max="99"/>
                    <ValidationMessage For="@(() => _data.ViewModel.Portions)"/>
                </div>

                <div class="flex-column gap">
                    <EnumPicker T="RecipeType" @bind-Selected="_data.ViewModel.Type" Values="@(Enum.GetValues<RecipeType>().ToList())"/>
                    <ValidationMessage For="@(() => _data.ViewModel.Type)"/>
                </div>

                <div class="flex-column gap">
                    <FilePicker @bind-Selected="_data.Images" MaxFiles="1" MaxSelectedFiles="1" HideUploadIfCompleted="true"/>
                    <ValidationMessage For="@(() => _data.Images)"/>
                </div>
            </div>

            <div class="spacer"></div>

            @* Durations *@
            <div class="grid-col-3 shrink gap">
                <div class="grid-label grid-label-span-3">
                    <span>‚è±Ô∏è</span>
                </div>

                <span>Preparation (in m)</span>
                <NumberPicker @bind-Value="_data.ViewModel.PreparationTime"/>

                <span>Cooking/Baking (in m)</span>
                <NumberPicker @bind-Value="_data.ViewModel.CookingTime"/>

            </div>

            <div class="spacer"></div>

            <div class="grid-col-2 shrink gap">
                <div class="grid-label">
                    <span>üè∑Ô∏è</span>
                </div>

                @* Tags *@
                <ChipSelect T="RecipeFlags"
                            AllowMultiSelect="true"
                            @bind-Selected="_data.ViewModel.Flags"
                            Values="Enum.GetValues<RecipeFlags>().ToList()"/>
            </div>

            <div class="spacer"></div>

            @* Ingredient *@
            <div class="grid-col-2 shrink gap">
                <div class="grid-label">
                    <span>üå±</span>
                </div>

                <div class="flex-column gap">

                    @foreach(var ingredient in _data.ViewModel.Ingredients)
                    {
                        @* ReSharper disable once AccessToModifiedClosure *@
                        <div class="flex-row-no-wrap gap">
                            <IconButton Icon="fa-solid fa-trash" OnClick="() => _data.ViewModel.Ingredients.Remove(ingredient)"/>
                            <div class="flex-column gap">
                                <DicPicker Values="_foods.ToDictionary(x => x.Id, x => x.Name)" @bind-Selected="ingredient.Id"/>
                                <ValidationMessage For="@(() => ingredient.Name)"/>
                            </div>
                            <div class="flex-column gap">
                                <FloatingNumberPicker @bind-Value="ingredient.Value"/>
                                <ValidationMessage For="@(() => ingredient.Value)"/>
                            </div>
                            <div class="flex-column gap">
                                <EnumPicker T="IngredientUnit"
                                            @bind-Selected="ingredient.Unit"
                                            Values="GetAvailableUnitsByIngredient(ingredient.Id)"/>
                                <ValidationMessage For="@(() => ingredient.Unit)"/>
                            </div>
                        </div>
                    }

                    <IconButton Icon="fa-solid fa-plus" OnClick="OnAddIngredientClicked"/>
                </div>

            </div>

            <div class="spacer"></div>

            @* Steps *@
            <div class="grid-col-2 shrink gap">
                <div class="grid-label">
                    <span>üìã</span>
                </div>

                <div class="flex-column gap">

                    @foreach (var step in _data.ViewModel.Steps)
                    {
                        <div class="flex-column gap">
                            <div class="flex-row-no-wrap gap">
                                <IconButton Icon="fa-solid fa-trash" OnClick="() => _data.ViewModel.Steps.Remove(step)"/>
                                <div style="width: 100%">

                                    <TextArea 
                                        placeholder="@($"Step {step.Order} ...")"  
                                        @bind-Value="@step.Text" 
                                        Rows="6">
                                    </TextArea>
                                </div>
                            </div>
                            <ValidationMessage For="@(() => step.Text)"/>
                        </div>
                    }

                    <IconButton Icon="fa-solid fa-plus" OnClick="OnAddStepClicked"/>
                </div>
            </div>

            <div class="spacer"></div>

            @* Buttons *@
            <ValidationSummary/>

            <div class="button">
                <TextButton Text="Save" Disabled="@(!_isEnabled)"/>
            </div>

        </div>
    </EditForm>
}